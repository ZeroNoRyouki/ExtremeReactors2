import java.nio.file.Paths
import java.nio.file.Files

plugins {

    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.171'
    id 'net.neoforged.gradle.mixin' version '7.0.171'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = "${project.minecraft_version}-${project.mod_version_major}.${project.mod_version_minor}.${project.mod_version_patch}"
if ('true' == project.mod_version_snapshot) {
    version += '-SNAPSHOT'
}

group = 'it.zerono.mods.extremereactors'

base {
    archivesName = 'ExtremeReactors2'
}

java {

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    withSourcesJar()
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

sourceSets.test {

    runs {
        modIdentifier = 'bigreactorstest'
    }
}

runs {

    def runPath = Paths.get(System.getenv('mc_runs'), "forge")

    if (!Files.exists(runPath)) {

        runPath = Paths.get("${rootProject.projectDir}", "runs")

        if (!Files.exists(runPath)) {
            Files.createDirectories(runPath)
        }
    }

    def clientRunDir = runPath.resolve("client-${project.minecraft_version}").toFile();
    def serverRunDir = runPath.resolve("server-${project.minecraft_version}").toFile();

    if (!clientRunDir.exists()) {
        clientRunDir.mkdirs();
    }

    if (!serverRunDir.exists()) {
        serverRunDir.mkdirs();
    }

    client {

        singleInstance false
        workingDirectory clientRunDir
    }

    server {
        workingDirectory serverRunDir
    }

    data {

        workingDirectory clientRunDir
        programArguments.addAll '--mod', 'bigreactors',
                '--all',
                '--existing', project.file('src/main/resources/').absolutePath,
                '--existing', project.file('src/generated/resources/').absolutePath,
                '--output', project.file('src/generated/resources/').absolutePath
    }
}

runs.configureEach {

    modSource project.sourceSets.main
    modSource project.sourceSets.test
}

tasks.withType(ProcessResources).configureEach {

    var replaceProperties = [
            minecraft_versionrange: minecraft_versionrange,
            loader_versionrange: loader_versionrange,
            forge_versionrange: forge_versionrange,
            zerocore_versionrange: zerocore_versionrange,
            mod_version: project.version
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

repositories {

	mavenLocal()

	// ZeroCore
    maven {
        url 'https://maven.zerono.it'
    }

    // JEI
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    // JEI
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    // cc-tweaked
    maven {
        url 'https://maven.squiddev.cc'
    }

    // patchouli
    maven {
        url 'https://maven.blamejared.com'
    }

    // cursemaven
    maven {
        url 'https://www.cursemaven.com'
    }
}

dependencies {

	implementation "net.neoforged:neoforge:${project.forge_version}"

    implementation "it.zerono.mods.zerocore:ZeroCore2:${zerocore_version}"

//    // JEI
//    compileOnly("mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}")
//    compileOnly("mezz.jei:jei-${project.minecraft_version}-neoforge-api:${project.jei_version}")
//    runtimeOnly("mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}")
//
//    // cc-tweaked
//    compileOnly("cc.tweaked:cc-tweaked-${project.minecraft_version}-core-api:${project.cctweaked_version}")
//    compileOnly("cc.tweaked:cc-tweaked-${project.minecraft_version}-forge-api:${project.cctweaked_version}")
//    runtimeOnly("cc.tweaked:cc-tweaked-${project.minecraft_version}-forge:${project.cctweaked_version}")
//
//    // patchouli
//    compileOnly "vazkii.patchouli:Patchouli:${project.patchouli_version}-NEOFORGE"
//    runtimeOnly "vazkii.patchouli:Patchouli:${project.patchouli_version}-NEOFORGE"
//
//    // mekanism
//    compileOnly "mekanism:Mekanism:${project.mekanism_version}"
//    runtimeOnly "mekanism:Mekanism:${project.mekanism_version}"
//    runtimeOnly "mekanism:Mekanism:${project.mekanism_version}:additions"
//    runtimeOnly "mekanism:Mekanism:${project.mekanism_version}:generators"

	// constructionwand
//    implementation fg.deobf("curse.maven:constructionwand-399558:4455720")
}

task apiJar(type: Jar) {

    from(sourceSets.main.allJava) {
        include 'it/zerono/mods/extremereactors/api/**'
    }
    from (sourceSets.main.output) {
        include 'it/zerono/mods/extremereactors/api/**'
    }

    archiveClassifier = 'api'
}

artifacts {
    archives apiJar
}

jar {
    manifest {
        attributes 'Specification-Title': project.mod_name
        attributes 'Specification-Vendor': 'ZeroNoRyouki'
        attributes 'Specification-Version': "2"
        attributes 'Implementation-Title': project.mod_name
        attributes 'Implementation-Vendor': 'ZeroNoRyouki'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }
}

publishing {

    publications {

        register('mavenJava', MavenPublication) {

            artifactId base.archivesName.get()

            from components.java

            artifact apiJar
        }
    }

    repositories {
        maven {
            url 'file://' + System.getenv('mc_maven')
        }
    }
}

tasks.withType(JavaCompile).configureEach {

    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.compilerArgs << "-Xmaxerrs" << "1000"
}

idea {

    module {

        downloadSources = true
        downloadJavadoc = true
    }
}
